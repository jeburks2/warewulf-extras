#!/bin/sh
#
# This is one of those types of files that you shouldn't edit unless you really
# know what you are doing and even then you should make a backup.
#
# Edit at your own risk! DANGER DANGER.


if test -f "/warewulf/config"; then
    . /warewulf/config
else
    echo "ERROR: Warewulf configuration file not found... rebooting in 1 minute"
    sleep 60
    echo b > /proc/sysrq-trigger || /sbin/reboot
fi

echo "Warewulf v4 is now booting: $WWHOSTNAME"
echo

echo "Mounting up kernel file systems"
mkdir /proc /dev /sys /run 2>/dev/null
mount -t proc proc /proc
mount -t devtmpfs devtmpfs /dev
mount -t sysfs sysfs /sys
mount -t tmpfs tmpfs /run

chmod 755 /warewulf/wwprescripts

echo "Checking Rootfs type"
ROOTFSTYPE=`stat -f -c "%T" /`

if test "$WWROOT" = "initramfs"; then
    echo "Provisioned to default initramfs file system: $ROOTFSTYPE"
    echo "Calling wwprescripts"
    exec /warewulf/wwprescripts
elif test "$WWROOT" = "tmpfs"; then
#    if test "$ROOTFSTYPE" = "tmpfs"; then
#        echo "ERROR: Switching the root file system requires the kernel argument: 'rootfstype=ramfs'"
#    else
        echo "Setting up tmpfs root file system"
        mkdir /newroot
        mount wwroot /newroot -t tmpfs
        echo "Moving RAMFS to TMPFS"
        tar -cf - --exclude ./proc --exclude ./sys --exclude ./dev --exclude ./newroot . | tar -xf - -C /newroot
        mkdir /newroot/proc /newroot/dev /newroot/sys /newroot/run 2>/dev/null
        echo "Calling switch_root and invoking wwprescripts"
        exec /sbin/switch_root /newroot /warewulf/wwprescripts
#    fi
# Blame the following elif block on:
# 2024-02-08 - Josh Burks <jeburks2@asu.edu>
# Purpose: Move the rootfs to a block device
elif test "$WWROOT" = "xfs"; then
        echo "Setting up xfs root file system"
        mkdir /newroot
        echo "Loading kernel modules"
        # More kernel modules may be needed depedning on the drive type
        /sbin/modprobe megaraid_sas
        /sbin/modprobe sd_mod
        /sbin/modprobe ahci
        /sbin/modprobe nvme
	#/sbin/modprobe mpt3sas # Grace hopper 2TiB disk
        # Give the kernel modules a few seconds to create /dev nodes
        count=0
	nvme="/dev/nvme0n1"
	sda="/dev/sda"
	sdb="/dev/sdb"
        while test $count -lt 100; do
		sleep 1
		if [ -e $nvme ] && [ -e $sda ]; then
			echo "Both $nvme AND $sda found!"
			ROOTFS_TARGET=$sda
			ROOTFS_TARGET_1="${ROOTFS_TARGET}1"
			TMP_TARGET=$nvme
			TMP_TARGET_1="${TMP_TARGET}p1"
			/sbin/parted -s $ROOTFS_TARGET mklabel gpt
			/sbin/parted -s $TMP_TARGET mklabel gpt
			/sbin/parted -s -a optimal $ROOTFS_TARGET mkpart primary 0% 100%
			/sbin/parted -s -a optimal $TMP_TARGET mkpart primary 0% 100%
			break
    		elif [ -e $sda ] && [ -e $sdb ]; then
			echo "Both $sda AND $sdb found!"
                        ROOTFS_TARGET=$sda
                        ROOTFS_TARGET_1="${ROOTFS_TARGET}1"
                        TMP_TARGET=$sdb
                        TMP_TARGET_1="${TMP_TARGET}1"
                        /sbin/parted -s $ROOTFS_TARGET mklabel gpt
                        /sbin/parted -s $TMP_TARGET mklabel gpt
                        /sbin/parted -s -a optimal $ROOTFS_TARGET mkpart primary 0% 100%
                        /sbin/parted -s -a optimal $TMP_TARGET mkpart primary 0% 100%
                        break
    		elif [ -e $nvme ] && [ ! -e $sda ]; then
        		echo "Only $nvme found!"
			ROOTFS_TARGET=$nvme
			ROOTFS_TARGET_1="${ROOTFS_TARGET}p1"
			TMP_TARGET=$nvme
			TMP_TARGET_1="${TMP_TARGET}p2"
			/sbin/parted -s $ROOTFS_TARGET mklabel gpt
			/sbin/parted -s -a optimal $ROOTFS_TARGET mkpart primary 0% 25%
			/sbin/parted -s -a optimal $TMP_TARGET mkpart primary 25% 100%
        		break
		elif [ -e $sda ] && [ ! -e $nvme ]; then
			echo "Only $sda found!"
			ROOTFS_TARGET=$sda
			ROOTFS_TARGET_1="${ROOTFS_TARGET}1"
			TMP_TARGET=$sda
			TMP_TARGET_1="${TMP_TARGET}2"
			/sbin/parted -s $ROOTFS_TARGET mklabel gpt
			/sbin/parted -s -a optimal $ROOTFS_TARGET mkpart primary 0% 25%
			/sbin/parted -s -a optimal $TMP_TARGET mkpart primary 25% 100%
			break
    		else
        		echo "Neither /dev/sda nor /dev/nvme found. Sleeping for 1 second..."
        		count=$((count+1))
    		fi
        done
	# If we do not find drives in 100 attemps, reboot or enter a shell
        if test $count -eq 100; then
          echo "Devices not found after 100 attempts."
          echo "Here is a shell to troubleshoot:"
	  /bin/sh
	  #echo b > /proc/sysrq-trigger || /sbin/reboot
        fi
	#Make the filesystems and mount the drives
	/sbin/mkfs.xfs -f $ROOTFS_TARGET_1 2> /dev/null
	/sbin/mkfs.xfs -f $TMP_TARGET_1 2> /dev/null
	mount $ROOTFS_TARGET_1 /newroot
	mkdir -p /newroot/mnt/job_tmp
	mount $TMP_TARGET_1 /newroot/mnt/job_tmp
        echo "Moving ROOTFS to XFS"
        tar -cf - --exclude ./proc --exclude ./sys --exclude ./dev --exclude ./newroot --exclude ./tmp . | tar --warning=no-timestamp -xf - -C /newroot
        mkdir /newroot/proc /newroot/dev /newroot/sys /newroot/run 2>/dev/null
        echo "Calling switch_root and invoking wwprescripts"
        exec /sbin/switch_root /newroot /warewulf/wwprescripts
#    fi
elif test "$WWROOT" = "xvda"; then
        echo "Setting up xfs root file system for xen VM"
        mkdir /newroot
        echo "Loading kernel modules"
	PATH=$PATH:/sbin
	modprobe ata_piix
	modprobe ata_generic
	modprobe xen_blkfront
        count=0
        xvda="/dev/xvda"
        while test $count -lt 100; do
                sleep 1
                if test -e $xvda ; then
                        echo "$xvda found!"
                        ROOTFS_TARGET=$xvda
                        ROOTFS_TARGET_1="${ROOTFS_TARGET}1"
                        parted -s $ROOTFS_TARGET mklabel gpt
                        parted -s -a optimal $ROOTFS_TARGET mkpart primary 0% 100%
                        break
		else
		  	echo "$xvda not found. Sleeping for 1 second..."
                        count=$((count+1))
		fi
	done
        if test $count -eq 100; then
            echo "Devices not found after 100 attempts."
            echo "Here is a shell to troubleshoot:"
            /bin/sh
            #echo b > /proc/sysrq-trigger || /sbin/reboot
        fi
        #Make the filesystems and mount the drives
        mkfs.xfs -f $ROOTFS_TARGET_1 2> /dev/null
        mount $ROOTFS_TARGET_1 /newroot
        echo "Moving ROOTFS to XFS"
        tar -cf - --exclude ./proc --exclude ./sys --exclude ./dev --exclude ./newroot --exclude ./tmp . | tar --warning=no-timestamp -xf - -C /newroot
        mkdir /newroot/proc /newroot/dev /newroot/sys /newroot/run 2>/dev/null
        echo "Calling switch_root and invoking wwprescripts"
        exec /sbin/switch_root /newroot /warewulf/wwprescripts
# End jeburks2 blame
else
    echo "ERROR: Unknown Warewulf Root file system: $WWROOT"
fi

echo
echo "There was a problem with the provisioning process, rebooting in 1 minute..."
sleep 60
echo b > /proc/sysrq-trigger || /sbin/reboot
